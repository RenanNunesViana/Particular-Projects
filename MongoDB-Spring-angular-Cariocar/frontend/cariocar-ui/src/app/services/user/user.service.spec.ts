import { TestBed } from '@angular/core/testing';

import { UserService } from './user.service';
import {of, throwError} from "rxjs";
import {HttpClient} from "@angular/common/http";

describe('UserService', () => {
  let service: UserService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(UserService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });

  // Generated by CodiumAI

  describe('UserService', () => {

    // Should be able to retrieve all users from the API
    it('should retrieve all users from the API', () => {
      // Mock the HttpClient get method to return a mock response
      const httpMock = TestBed.inject(HttpClient);
      const mockResponse = [{ id: '1', cpf: '123456789', firstName: 'John', lastName: 'Doe', cel: '123456789', email: 'john.doe@example.com' }];
      spyOn(httpMock, 'get').and.returnValue(of(mockResponse));

      // Call the findAll method of the UserService
      const userService = TestBed.inject(UserService);
      userService.findAll().subscribe(users => {
        // Assert that the response matches the mock response
        expect(users).toEqual(mockResponse);
      });
    });

    // Should be able to add a new user to the API
    it('should add a new user to the API', () => {
      // Mock the HttpClient post method to return a mock response
      const httpMock = TestBed.inject(HttpClient);
      const mockUser = { firstName: 'John', lastName: 'Doe', cpf: '123456789', id: null, cel: '123456789', email: 'john.doe@example.com' };
      spyOn(httpMock, 'post').and.returnValue(of(mockUser));

      // Call the save method of the UserService
      const userService = TestBed.inject(UserService);
      userService.save(mockUser).subscribe(user => {
        // Assert that the response matches the mock user
        expect(user).toEqual(mockUser);
      });
    });

    // Should be able to retrieve all users that contain a specific search value
    it('should retrieve all users that contain a specific search value', () => {
      // Mock the HttpClient get method to return a mock response
      const httpMock = TestBed.inject(HttpClient);
      const searchValue = 'John';
      const mockResponse = [{ id: '1', cpf: '123456789', firstName: 'John', lastName: 'Doe', cel: '123456789', email: 'john.doe@example.com' }];
      spyOn(httpMock, 'get').and.returnValue(of(mockResponse));

      // Call the findAllThatContains method of the UserService
      const userService = TestBed.inject(UserService);
      userService.findAllThatContains(searchValue).subscribe(users => {
        // Assert that the response matches the mock response
        expect(users).toEqual(mockResponse);
      });
    });

    // Should handle API errors when retrieving all users
    it('should handle API errors when retrieving all users', () => {
      // Mock the HttpClient get method to throw an error
      const httpMock = TestBed.inject(HttpClient);
      spyOn(httpMock, 'get').and.returnValue(throwError('API error'));

      // Call the findAll method of the UserService
      const userService = TestBed.inject(UserService);
      userService.findAll().subscribe(
        () => {
          // This block should not be executed
          expect(true).toBe(false);
        },
        error => {
          // Assert that the error message is as expected
          expect(error).toBe('API error');
        }
      );
    });

    // Should handle API errors when adding a new user
    it('should handle API errors when adding a new user', () => {
      // Mock the HttpClient post method to throw an error
      const httpMock = TestBed.inject(HttpClient);
      const mockUser = { firstName: 'John', lastName: 'Doe', cpf: '123456789', id: null, cel: '123456789', email: 'john.doe@example.com' };
      spyOn(httpMock, 'post').and.returnValue(throwError('API error'));

      // Call the save method of the UserService
      const userService = TestBed.inject(UserService);
      userService.save(mockUser).subscribe(
        () => {
          // This block should not be executed
          expect(true).toBe(false);
        },
        error => {
          // Assert that the error message is as expected
          expect(error).toBe('API error');
        }
      );
    });

    // Should handle API errors when retrieving all users that contain a specific search value
    it('should handle API errors when retrieving all users that contain a specific search value', () => {
      // Mock the HttpClient get method to throw an error
      const httpMock = TestBed.inject(HttpClient);
      const searchValue = 'John';
      spyOn(httpMock, 'get').and.returnValue(throwError('API error'));

      // Call the findAllThatContains method of the UserService
      const userService = TestBed.inject(UserService);
      userService.findAllThatContains(searchValue).subscribe(
        () => {
          // This block should not be executed
          expect(true).toBe(false);
        },
        error => {
          // Assert that the error message is as expected
          expect(error).toBe('API error');
        }
      );
    });

  });

});
